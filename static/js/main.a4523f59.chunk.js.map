{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","Content","Layout","Sider","Header","Footer","useState","menu","setMenu","allData","setAllData","dataSource","setDataSource","useEffect","a","tabs","Map","axios","get","then","res","data","html","parse","viewport","querySelector","childNodes","forEach","node","set","id","key","sheetMenu","value","tabName","innerText","name","tableBody","columnsNameRow","columnsName","i","length","push","tr","rowData","j","text","tabList","tab","console","error","wrapper","changeTab","message","columns","dataIndex","title","render","record","href","target","rel","width","defaultSortOrder","link","style","minHeight","overflow","height","position","left","onClick","defaultSelectedKeys","theme","map","Item","marginLeft","textAlign","padding","backgroundColor","fontSize","maxWidth","margin","direction","pagination","total","pageSize","hideOnSinglePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4523f59.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Table, Layout, Menu, Space, message } from \"antd\";\nimport axios from \"axios\";\nimport { parse } from \"node-html-parser\";\n\nfunction App() {\n  const { Content, Sider, Header, Footer } = Layout;\n  const [menu, setMenu] = useState([]);\n  const [allData, setAllData] = useState({});\n  const [dataSource, setDataSource] = useState([]);\n\n  const htmlURL =\n    \"https://docs.google.com/spreadsheets/d/e/2PACX-1vScDAvmEaLUZS4yWIvVLkDsb3vZjy_3vJvllPxtrseZx0G8gphZSngeKk-x16-vnthmoHORXj-3GApx/pubhtml\";\n\n  useEffect(() => {\n    const wrapper = async () => {\n      const tabs = new Map();\n      try {\n        const res = await axios\n          .get(htmlURL)\n          .then((res) => {\n            return res.data;\n          })\n          .then((res) => {\n            return res;\n          });\n        const html = parse(res);\n\n        const viewport = html.querySelector(\"#sheets-viewport\");\n        viewport.childNodes.forEach((node) => {\n          tabs.set(node.id, { id: node.id, key: node.id });\n        });\n\n        const sheetMenu = html.querySelector(\"#sheet-menu\");\n        tabs.forEach((value, id) => {\n          const tabName = sheetMenu.querySelector(`#sheet-button-${id}`)\n            .childNodes[0].innerText;\n          tabs.set(id, {\n            ...tabs.get(id),\n            name: tabName,\n          });\n        });\n\n        let allData = {};\n        tabs.forEach((value, id) => {\n          const tableBody = viewport.querySelector(`#${id} table tbody`);\n          const columnsNameRow = tableBody.childNodes[0];\n          let columnsName = [];\n          let data = [];\n          for (let i = 0; i < columnsNameRow.childNodes.length; i++) {\n            columnsName.push(columnsNameRow.childNodes[i].innerText);\n          }\n          for (let i = 1; i < tableBody.childNodes.length; i++) {\n            const tr = tableBody.childNodes[i];\n            let rowData = {};\n            for (let j = 1; j < tr.childNodes.length; j++) {\n              const td = tr.childNodes[j];\n              const text = td.innerText;\n              rowData[columnsName[j]] = text;\n            }\n            data.push(rowData);\n          }\n          allData[id] = data;\n        });\n        let tabList = [];\n        tabs.forEach((tab) => {\n          tabList.push(tab);\n        });\n        setMenu(tabList);\n        setAllData(allData);\n        setDataSource(allData[\"0\"]);\n        // changeTab(tabs.values().next().value);\n        // quietFetch(tabs);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    wrapper();\n  }, []);\n\n  const changeTab = async (tab) => {\n    if (allData[tab.key]) {\n      setDataSource(allData[tab.key]);\n      return;\n    } else {\n      message.error(\"Sorry, there's an error occurred. Please try again later\");\n    }\n    // setTableLoading(true);\n    // try {\n    //   const data = await getSingleTabData(tab.key);\n    //   setDataSource(data);\n    //   // setAllData({ ...allData, [tab.key]: data });\n    // } catch (err) {\n    //   setDataSource([]);\n    //   message.error(\"Sorry, there was an error occurred\");\n    // }\n    // setTableLoading(false);\n  };\n\n  const columns = [\n    {\n      key: \"Company\",\n      dataIndex: \"Company\",\n      title: \"Company\",\n      render: (text, record) => (\n        <a\n          href={record[\"Official Website\"]}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {text}\n        </a>\n      ),\n      width: 150,\n      defaultSortOrder: \"ascend\",\n    },\n    {\n      key: \"CS Affiliated\",\n      dataIndex: \"CS Affiliated\",\n      title: \"UW CS Affiliates\",\n      width: 150,\n    },\n    {\n      key: \"What they do\",\n      dataIndex: \"What they do\",\n      title: \"What they do\",\n      width: 400,\n    },\n    {\n      key: \"Apply Website\",\n      dataIndex: \"Apply Website\",\n      title: \"Apply Website\",\n      render: (link) => {\n        if (link) {\n          return (\n            <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n              Apply\n            </a>\n          );\n        }\n      },\n      width: 150,\n    },\n    {\n      key: \"Student Apply\",\n      dataIndex: \"Student Apply\",\n      title: \"Student Apply\",\n      render: (link) => {\n        if (link) {\n          return (\n            <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n              Student Apply\n            </a>\n          );\n        }\n      },\n      width: 150,\n    },\n  ];\n\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Sider\n        style={{\n          overflow: \"auto\",\n          height: \"100vh\",\n          position: \"fixed\",\n          left: 0,\n        }}\n      >\n        <Menu onClick={changeTab} defaultSelectedKeys={[\"0\"]} theme=\"light\">\n          {menu.map((tab) => (\n            <Menu.Item key={tab.id}>{tab.name}</Menu.Item>\n          ))}\n        </Menu>\n      </Sider>\n      <Layout style={{ marginLeft: 200 }}>\n        <Header\n          style={{\n            textAlign: \"center\",\n            padding: 10,\n            backgroundColor: \"rgb(240, 242, 245)\",\n          }}\n        >\n          <h3 style={{ fontSize: 30 }}>Company List</h3>\n        </Header>\n        <div style={{ textAlign: \"center\" }}>\n          <p>\n            Data are extracted from{\" \"}\n            <a\n              href=\"https://docs.google.com/spreadsheets/d/1xnufjjVD6_CpvanNPJa36XaycK2VMFoRlLE4OdWBQq4/edit?usp=sharing\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              here\n            </a>\n            . Delay up to 5 minutes\n          </p>\n        </div>\n        <Content style={{ padding: 10 }}>\n          <div style={{ maxWidth: \"75%\", margin: \"0 auto\" }}>\n            <Space direction=\"vertical\">\n              <Table\n                columns={columns}\n                dataSource={dataSource}\n                pagination={{\n                  total: dataSource.length,\n                  pageSize: dataSource.length,\n                  hideOnSinglePage: true,\n                }}\n              />\n            </Space>\n          </div>\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"antd/dist/antd.css\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}